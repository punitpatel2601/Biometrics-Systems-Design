/*****************************************************************************
**                                                                          **
**  Copyright © 1996-2008 DigitalPersona, Inc.                              **
**                                                                          **
******************************************************************************
**
**  name:     dpMatch.h
**
**  version:  4.1.1
**
**  language: ANSI C
**
**  notes:    public header
**            prefix MC_
**            Fingerprint Comparison Functions
**
******************************************************************************/

/********************************* OVERVIEW **********************************

This file contains code for performing fingerprint enrollment and fingerprint verification.

Fingerprint enrollment is the initial process of collecting fingerprint data from a person by extracting the
fingerprint features from the person’s fingerprint image for the purpose of enrollment and then storing the
resulting data in a template for later comparison. The fingerprint enrollment function, MC_generateRegFeatures,
computes a fingerprint template from a required number of fingerprint feature sets.

Fingerprint verification is the process of extracting the fingerprint features from a person’s fingerprint image
provided for the purpose of verification, comparing the resulting data to the fingerprint template generated by
the MC_generateRegFeatures function, and deciding if the two match. The fingerprint verification function,
MC_verifyFeaturesEx, performs a one-to-one comparison and makes a decision of match or non-match.

During verification, occasionally a person who is legitimately enrolled is rejected by the system (a false
negative decision), and sometimes a person who is not enrolled is accepted by the system (a false positive
decision). The proportion of false positive decisions is known as the false accept rate (FAR), and the proportion
of false negative decisions is known as the false reject rate (FRR). In fingerprint recognition systems, the FAR
and the FRR are traded off against each other, that is, the lower the FAR, the higher the FRR, and the higher the
FAR, the lower the FRR.

The MC_setSecurityLevel function enables you to set the value of the FAR, or the security level, to accommodate
the needs of your application. In some applications, such as an access system to a confidential site or database,
a lower FAR is required. In other applications, such as an entry system to an entertainment theme park, security
may not be as significant as accessibility, and it may be preferable to decrease the FRR at the expense of an
increased FAR.


*************************** SUMMARY OF FUNCTIONS *****************************

Fingerprint Comparison Module Initialization, Termination, and Settings
    MC_getVersionInfo: Retrieves the software version information of the fingerprint comparison module.
    MC_init: Initializes the fingerprint comparison module.
    MC_terminate: Terminates the fingerprint comparison module and releases the resources associated with it.
    MC_createContext: Creates a context for the fingerprint comparison module.
    MC_closeContext: Destroys a comparison context and releases the resources associated with it.
    MC_getSettings: Retrieves the current fingerprint comparison module settings.
    MC_setSecurityLevel: Sets the security level of the specified comparison context.
    MC_getSecurityLevel: Retrieves the current security level of the specified comparison context.

Fingerprint Enrollment and Verification
    MC_getFeaturesLen: Retrieves the size of the buffer for the fingerprint template.
    MC_generateRegFeatures: Performs fingerprint enrollment.
    MC_verifyFeaturesEx: Performs fingerprint verification.

*************************************************************************/

#ifndef MC_DEFINED
#define MC_DEFINED

//#if !defined(WIN32) && !defined(_WIN32_WCE)
//#define __declspec(x)
//#endif

#ifndef MC_DLL_INTERFACE

#if defined(__GNUC__) && (__GNUC__ >= 3)
# define MC_IMPORT
#elif defined(_MSC_VER)
# define MC_IMPORT __declspec(dllimport)
#else
# define MC_IMPORT
#endif

#ifdef __cplusplus
#ifdef USING_STATIC_LIBS
#define MC_DLL_INTERFACE    extern "C"
#else
#define MC_DLL_INTERFACE    extern "C" MC_IMPORT
#endif /* USING_STATIC_LIBS */
#else
#ifdef USING_STATIC_LIBS
#define MC_DLL_INTERFACE
#else
#define MC_DLL_INTERFACE    MC_IMPORT
#endif /* USING_STATIC_LIBS */
#endif /* __cplusplus */

#endif /* !MC_DLL_INTERFACE */

/* Fingerprint comparison module settings structure. */

typedef struct
{
    int numPreRegFeatures;   /* Number of fingerprint feature sets required to generate a fingerprint template. */
}
MC_SETTINGS, *MC_SETTINGS_PT;


MC_DLL_INTERFACE void
MC_getVersionInfo(
    OUT FT_VERSION_INFO_PT mcModuleVersionPt); /* Pointer to the structure of the software version of the
                                                  fingerprint comparison module */

/*Retrieves the software version information of the fingerprint comparison module
  in the structure of type FT_VERSION_INFO.
----------------------------------------------------------------------------------------*/

MC_DLL_INTERFACE FT_RETCODE
MC_init(void);

/* Initializes the fingerprint comparison module. This function must be called before any other functions in the
module are called.

    --- Return Codes for MC_init ---

    FT_OK:                  The function succeeded.
    FT_ERR_BAD_INI_SETTING: Initialization settings are corrupted.
    FT_ERR_NO_MEMORY:       There is not enough memory to initialize the fingerprint comparison module.

----------------------------------------------------------------------------------------*/

MC_DLL_INTERFACE FT_RETCODE
MC_terminate(void);

/* Terminates the fingerprint comparison module and releases the resources associated with it.

----------------------------------------------------------------------------------------*/

MC_DLL_INTERFACE FT_RETCODE
MC_createContext(
    OUT FT_HANDLE* mcContext); /* Pointer to the memory receiving the handle to the comparison context */

/* Creates a context for the fingerprint comparison module. If this function succeeds, it returns the handle to
the context that is created. All of the operations in this context require this handle.

----------------------------------------------------------------------------------------*/

MC_DLL_INTERFACE FT_RETCODE
MC_closeContext(
    IN FT_HANDLE mcContext); /* Handle to the comparison module context */

/* Destroys a comparison context and releases the resources associated with it.

----------------------------------------------------------------------------------------*/

MC_DLL_INTERFACE FT_RETCODE
MC_getSettings(
    OUT MC_SETTINGS_PT mcSettingsPt); /* Pointer to the structure of the fingerprint comparison module settings */

/* Retrieves the current fingerprint comparison module settings in the structure of type MC_SETTINGS. This
function provides the number of fingerprint feature sets required for the purpose of fingerprint enrollment. This
setting is read-only.

----------------------------------------------------------------------------------------*/

MC_DLL_INTERFACE FT_RETCODE
MC_setSecurityLevel(
    IN FT_HANDLE mcContext,   /* Handle to the comparison context */
    IN FT_FA_RATE targetFar); /* Target FAR. For high security, use the low value of FAR defined in
                                 HIGH_SEC_FA_RATE; for mid-range security, use the mid-range value of FAR defined
                                 in MED_SEC_FA_RATE (the default); and for low security, use the high value of FAR
                                 defined in LOW_SEC_FA_RATE. */

/* Sets the security level of a comparison context by specifying a target false accept rate (FAR). The lower the
value of the FAR, the higher the security level and the higher the target false reject rate (FRR). Important: This
function is to be used for comparison contexts only. Do not specify a security level for a feature extraction
context.

    --- Return Codes for MC_setSecurityLevel ---

    FT_OK:                  The function succeeded.
    FT_ERR_NO_INIT:         The fingerprint comparison module is not initialized.
    FT_ERR_INVALID_PARAM:   The value of the parameter targetFar <= 0.0 or >= 100.0, or the specified comparison
                            context is not valid.
    FT_ERR_INVALID_CONTEXT: The specified comparison context is not valid.
    FT_WRN_INTERNAL:        The value of the parameter targetFar is unacceptably high and was reduced to an
                            internally defined value.

----------------------------------------------------------------------------------------*/

MC_DLL_INTERFACE FT_RETCODE
MC_getSecurityLevel(
    IN FT_HANDLE mcContext, /* Handle to the comparison context */
    OUT FT_FA_RATE* targetFar); /* Pointer to the memory receiving the target FAR for the comparison context */

/* Retrieves the current security level of the specified comparison context in terms of the false accept rate (FAR).

----------------------------------------------------------------------------------------*/

MC_DLL_INTERFACE FT_RETCODE
MC_getFeaturesLen(
    IN FT_FTR_TYPE featureSetPurpose,  /* Feature set purpose. Specifies the purpose for which the fingerprint
                                          feature set is to be created. For a fingerprint feature set to be used
                                          for enrollment, use the value FT_PRE_REG_FTR; for verification, use
                                          FT_VER_FTR; and for a fingerprint template, use FT_REG_FTR. */
    IN FT_REG_OPTIONS reserved0,       /* This parameter is deprecated and should always be set to 0. */
    OUT int* recommendedTemplateSize,  /* Pointer to the memory that will receive the size of the buffer for the
                                          fingerprint template recommended for best recognition accuracy, or NULL.
                                          If NULL is passed, minimumTemplateSize must not be NULL. */
    OUT int* minimumTemplateSize);     /* Pointer to the memory receiving the minimum size of the buffer for the
                                          fingerprint template, or NULL. If NULL is passed, recommendedTemplateSize
                                          must not be NULL. */

/* Retrieves the size of the buffer for the fingerprint template. This function returns either the minimum or the
recommended size that provides the best recognition accuracy, or both.

----------------------------------------------------------------------------------------*/

MC_DLL_INTERFACE FT_RETCODE
MC_generateRegFeatures(
    IN FT_HANDLE mcContext,        /* Handle to the comparison context */
    IN int reserved0,              /* This parameter is deprecated and should always be set to 0. */
    IN int numFeatureSets,         /* Number of input fingerprint feature sets, which is the number specified in
                                      the numFeatureSets field of the structure of type MC_SETTINGS. */
    IN int featureSetSize,         /* Size of the buffer for the fingerprint feature set (assuming that the size
                                      of each fingerprint feature set is the same) */
    IN FT_BYTE* featureSet[],      /* Array of pointers to the locations of the buffers for each fingerprint
                                      feature set */
    IN int templateSize,           /* Size of the fingerprint template */
    OUT FT_BYTE* templatePt,       /* Pointer to the location of the buffer receiving the fingerprint template */
    OUT FT_BYTE reserved1[],       /* This parameter is deprecated and should be set to NULL. */
    OUT FT_BOOL* templateCreated); /* Pointer to the memory receiving the value of whether the template is created.
                                      If the value of this parameter is FT_TRUE, the fingerprint template was
                                      written to template. If the value is FT_FALSE, a template was not created. */

/* Creates a fingerprint template to be used for later comparison with a fingerprint feature set. This function,
known as fingerprint enrollment, computes the fingerprint template using the specified number of fingerprint
feature sets (numFeatureSets) created by the FX_extractFeatures function.

    --- Return Codes for MC_generateRegFeatures ---

    FT_OK:                  The function succeeded.
    FT_ERR_NO_INIT:         The fingerprint comparison module is not initialized.
    FT_ERR_NO_MEMORY:       There is not enough memory to perform the function.
    FT_ERR_BAD_INI_SETTING: Initialization settings are corrupted.
    FT_ERR_INVALID_BUFFER:  A buffer is not valid.
    FT_ERR_INVALID_PARAM:   One or more parameters are not valid.
    FT_ERR_INTERNAL:        An internal error occurred.

----------------------------------------------------------------------------------------*/

MC_DLL_INTERFACE FT_RETCODE
MC_verifyFeaturesEx(
    IN FT_HANDLE mcContext,           /* Handle to the comparison context */
    IN int templateSize,              /* Size of the fingerprint template */
    IN OUT FT_BYTE* templatePt,       /* Pointer to the location of the buffer containing the fingerprint template */
    IN int featureSetSize,            /* Size of the fingerprint feature set */
    IN FT_BYTE* featureSet,           /* Pointer to the location of the buffer containing the fingerprint feature set */
    IN FT_BOOL reserved0,             /* This parameter is deprecated and should always be set to 0. */
    OUT FT_BOOL* reserved1,           /* This parameter is deprecated and should always be set to NULL. */
    OUT FT_BYTE reserved2[],          /* This parameter is deprecated and should always be set to NULL. */
    OUT FT_VER_SCORE_PT reserved3,    /* This parameter is deprecated and should always be set to NULL. */
    OUT double* achievedFar,          /* Pointer to the value of the achieved FAR for this comparison. If the
                                         achieved FAR is not required, a NULL pointer can be passed. */
    OUT FT_BOOL* comparisonDecision); /* Pointer to the memory receiving the comparison decision. This parameter
                                         indicates whether the comparison of the fingerprint feature set and the
                                         fingerprint template resulted in a decision of match (FT_TRUE) or non-match
                                         (FT_FALSE) at the security level of the specified comparison context. */

/* Performs a one-to-one comparison of a fingerprint feature set with a fingerprint template produced at
enrollment and makes a decision of match or non-match. This function is known as fingerprint verification. The
function succeeds if the comparison score is high enough given the security level of the specified comparison
context.

    --- Return Codes for MC_verifyFeaturesEx ---

    FT_OK:                  The function succeeded.
    FT_ERR_NO_INIT:         The fingerprint comparison module is not initialized.
    FT_ERR_NO_MEMORY:       There is not enough memory to perform the function.
    FT_ERR_BAD_INI_SETTING: Initialization settings are corrupted.
    FT_ERR_INVALID_BUFFER:  An internal error occurred.
    FT_ERR_INVALID_PARAM:   One or more parameters are not valid.

----------------------------------------------------------------------------------------*/


#endif
